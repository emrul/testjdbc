import org.gradle.jvm.tasks.Jar
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

plugins {
    java
    application
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id("org.jetbrains.kotlin.jvm").version("1.3.21")
    id("com.hpe.kraal") version "0.0.14"
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    mavenCentral()
    maven(url = "https://oss.sonatype.org/content/repositories/snapshots")
    maven(url = "https://jitpack.io")
    jcenter()
}

dependencies {
    implementation("org.postgresql:postgresql:42.2.5")
    implementation("com.leafclick:hikariCP:HikariCP-3.3.2-graal-RC3")
    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")


    compileOnly("com.oracle.substratevm:svm:1.0.0-rc12")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}


java {
    val kotlinSrcDir = "src/main/kotlin"
    val mainJavaSourceSet: SourceDirectorySet = sourceSets.getByName("main").java
    mainJavaSourceSet.srcDir(kotlinSrcDir)
    println(mainJavaSourceSet.srcDirs)
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType<KotlinCompile>().configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += listOf("-progressive")
        // disable -Werror with: ./gradlew -PwarningsAsErrors=false
        //allWarningsAsErrors = project.findProperty("warningsAsErrors") != "false"
    }
}

val fatjar by tasks.creating(Jar::class) {

    val a = configurations.runtime.get().map { it.name }
    //from(configurations.runtime.get().map { if (it.isDirectory) it else zipTree(it) })

    from(kraal.outputZipTrees) {// + configurations.compile.get().map { if (it.isDirectory) it else zipTree(it) }) {
        exclude("META-INF/*.SF")
        exclude("META-INF/*.DSA")
        exclude("META-INF/*.RSA")
    }
    //with(tasks["jar"] as CopySpec)

    manifest {
        attributes("Main-Class" to "testjdbc.Library")
    }

    destinationDir = project.buildDir.resolve("fatjar")
    archiveName = "OexApp.jar"
}

tasks.named("assemble").configure {
    dependsOn(fatjar)
}